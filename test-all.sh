#!/bin/bash

# USDM Corrector Test Suite
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ USDM

echo "üöÄ Starting USDM Corrector Test Suite..."
echo "========================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test results tracking
PASSED=0
FAILED=0
TOTAL=0

# Function to run test and track results
run_test() {
    local test_name="$1"
    local test_command="$2"
    local description="$3"
    
    echo -e "\n${BLUE}üìã Running: $test_name${NC}"
    echo "   Description: $description"
    echo "   Command: $test_command"
    echo "----------------------------------------"
    
    TOTAL=$((TOTAL + 1))
    
    if eval $test_command; then
        echo -e "${GREEN}‚úÖ PASSED: $test_name${NC}"
        PASSED=$((PASSED + 1))
    else
        echo -e "${RED}‚ùå FAILED: $test_name${NC}"
        FAILED=$((FAILED + 1))
    fi
}

# Compile contracts first
echo -e "${YELLOW}üî® Compiling contracts...${NC}"
if forge build; then
    echo -e "${GREEN}‚úÖ Compilation successful${NC}"
else
    echo -e "${RED}‚ùå Compilation failed${NC}"
    exit 1
fi

# 1. Unit Tests - Fast execution with mocks
echo -e "\n${YELLOW}üß™ UNIT TESTS${NC}"
echo "=================================="

run_test "Basic Integration Tests" \
    "forge test --match-contract CorrectorIntegrationSimple -v" \
    "–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –º–æ–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"

run_test "Advanced Algorithm Tests" \
    "forge test --match-contract CorrectorAdvanced -v" \
    "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Å—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –∫—É—Ä—Å–æ–≤ –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞"

run_test "Arbitrage Strategy Tests" \
    "forge test --match-contract CorrectorArbitrage -v" \
    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏ MEV –∑–∞—â–∏—Ç—ã"

# 2. Integration Tests - With mainnet forks
echo -e "\n${YELLOW}üåê INTEGRATION TESTS (MAINNET FORK)${NC}"
echo "=================================="

run_test "Ethereum Mainnet Fork Tests" \
    "forge test --match-contract CorrectorMainnetFork --fork-url https://rpc.ankr.com/eth -v" \
    "–¢–µ—Å—Ç—ã —Å —Ñ–æ—Ä–∫–æ–º Ethereum –º–µ–π–Ω–Ω–µ—Ç–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"

# 3. Fuzz Testing
echo -e "\n${YELLOW}üé≤ FUZZ TESTING${NC}"
echo "=================================="

run_test "Rate Calculation Fuzz Tests" \
    "forge test --match-test testFuzz --fuzz-runs 1000 -v" \
    "–§–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º"

# 4. Gas Optimization Tests
echo -e "\n${YELLOW}‚õΩ GAS OPTIMIZATION TESTS${NC}"
echo "=================================="

run_test "Gas Usage Analysis" \
    "forge test --match-test testPerformance --gas-report -v" \
    "–ê–Ω–∞–ª–∏–∑ –≥–∞–∑–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"

# 5. Security Tests
echo -e "\n${YELLOW}üîí SECURITY TESTS${NC}"
echo "=================================="

run_test "Access Control Tests" \
    "forge test --match-test testSecurity -v" \
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞"

run_test "Flash Loan Protection Tests" \
    "forge test --match-test testFlashLoan -v" \
    "–¢–µ—Å—Ç—ã –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫ —Å —Ñ–ª—ç—à-–∑–∞–π–º–∞–º–∏"

# 6. Edge Cases
echo -e "\n${YELLOW}‚ö†Ô∏è  EDGE CASE TESTING${NC}"
echo "=================================="

run_test "Extreme Market Conditions" \
    "forge test --match-test testExtreme -v" \
    "–¢–µ—Å—Ç—ã —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"

run_test "Overflow Protection Tests" \
    "forge test --match-test testOverflow -v" \
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è"

# 7. Multi-chain Tests (if configured)
if [ -n "$BSC_RPC_URL" ] && [ -n "$POLYGON_RPC_URL" ]; then
    echo -e "\n${YELLOW}üåç MULTI-CHAIN TESTS${NC}"
    echo "=================================="
    
    run_test "BSC Fork Tests" \
        "forge test --match-contract CorrectorMainnetFork --fork-url $BSC_RPC_URL -v" \
        "–¢–µ—Å—Ç—ã —Å —Ñ–æ—Ä–∫–æ–º BSC"
    
    run_test "Polygon Fork Tests" \
        "forge test --match-contract CorrectorMainnetFork --fork-url $POLYGON_RPC_URL -v" \
        "–¢–µ—Å—Ç—ã —Å —Ñ–æ—Ä–∫–æ–º Polygon"
fi

# 8. Coverage Analysis
echo -e "\n${YELLOW}üìä COVERAGE ANALYSIS${NC}"
echo "=================================="

run_test "Code Coverage Report" \
    "forge coverage --report lcov" \
    "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Ç–µ—Å—Ç–∞–º–∏"

# Performance Benchmarks
echo -e "\n${YELLOW}üèÅ PERFORMANCE BENCHMARKS${NC}"
echo "=================================="

echo "Running gas snapshots..."
forge snapshot --match-contract Corrector

# Test Summary
echo -e "\n${BLUE}üìà TEST SUMMARY${NC}"
echo "========================================"
echo -e "Total Tests: $TOTAL"
echo -e "${GREEN}Passed: $PASSED${NC}"
echo -e "${RED}Failed: $FAILED${NC}"

if [ $FAILED -eq 0 ]; then
    echo -e "\n${GREEN}üéâ ALL TESTS PASSED! üéâ${NC}"
    echo "System is ready for production deployment."
    exit 0
else
    echo -e "\n${RED}‚ùå SOME TESTS FAILED${NC}"
    echo "Please review failed tests before deployment."
    exit 1
fi

# Additional commands for manual testing:
echo -e "\n${YELLOW}üîß MANUAL TESTING COMMANDS${NC}"
echo "========================================"
echo "Run specific test:"
echo "  forge test --match-test testCalculateAverageRates -vvv"
echo ""
echo "Run with detailed traces:"
echo "  forge test --match-contract CorrectorIntegration -vvv"
echo ""
echo "Run with mainnet fork (specific block):"
echo "  forge test --fork-url https://rpc.ankr.com/eth --fork-block-number 18500000 -v"
echo ""
echo "Run gas profiling:"
echo "  forge test --gas-report --match-contract Corrector"
echo ""
echo "Generate coverage HTML report:"
echo "  forge coverage --report html"
