#!/bin/bash

# MultiUSD Test Runner
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã USDM/Corrector

set -e

echo "üöÄ MultiUSD Test Suite Runner"
echo "============================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v forge &> /dev/null; then
        log_error "Forge –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Foundry: https://book.getfoundry.sh/"
        exit 1
    fi
    
    if ! command -v cast &> /dev/null; then
        log_error "Cast –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Foundry: https://book.getfoundry.sh/"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
compile_contracts() {
    log_info "–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤..."
    
    if forge build; then
        log_success "–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"
        exit 1
    fi
}

# Unit —Ç–µ—Å—Ç—ã
run_unit_tests() {
    log_info "–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
    
    echo "üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞..."
    if forge test --match-contract CorrectorUnitTest -vv; then
        log_success "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        log_error "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    fi
}

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ñ–æ—Ä–∫–æ–º –º–µ–π–Ω–Ω–µ—Ç–∞
run_integration_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ñ–æ—Ä–∫–æ–º –º–µ–π–Ω–Ω–µ—Ç–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ RPC URL
    if [ -z "$ETH_RPC_URL" ]; then
        log_warning "ETH_RPC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π RPC..."
        export ETH_RPC_URL="https://rpc.ankr.com/eth"
    fi
    
    echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–æ—Ä–∫–æ–º Ethereum..."
    if forge test --match-contract CorrectorIntegrationTest --fork-url $ETH_RPC_URL --fork-block-number 18500000 -vv; then
        log_success "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        log_error "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    fi
}

# –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
run_performance_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    
    echo "‚ö° –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≥–∞–∑–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
    if forge test --match-test "testPerformance" --gas-report -vv; then
        log_success "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
    fi
}

# –§–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç—ã
run_fuzz_tests() {
    log_info "–ó–∞–ø—É—Å–∫ —Ñ–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç–æ–≤..."
    
    echo "üé≤ –§–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ..."
    if forge test --match-test "testFuzz" --fuzz-runs 1000 -vv; then
        log_success "–§–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
    fi
}

# –ú—É–ª—å—Ç–∏—á–µ–π–Ω —Ç–µ—Å—Ç—ã
run_multichain_tests() {
    log_info "–ó–∞–ø—É—Å–∫ –º—É–ª—å—Ç–∏—á–µ–π–Ω —Ç–µ—Å—Ç–æ–≤..."
    
    # Ethereum
    echo "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Ethereum..."
    if forge test --match-test "testEthereumMainnet" --fork-url "https://rpc.ankr.com/eth" --fork-block-number 18500000 -vv; then
        log_success "Ethereum —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        log_warning "Ethereum —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
    fi
    
    # BSC (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω RPC)
    echo "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ BSC..."
    if forge test --match-test "testBSCMainnet" --fork-url "https://rpc.ankr.com/bsc" --fork-block-number 35000000 -vv 2>/dev/null; then
        log_success "BSC —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        log_warning "BSC —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
    fi
    
    # Polygon (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω RPC)
    echo "üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Polygon..."
    if forge test --match-test "testPolygonMainnet" --fork-url "https://rpc.ankr.com/polygon" --fork-block-number 50000000 -vv 2>/dev/null; then
        log_success "Polygon —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
    else
        log_warning "Polygon —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–ª–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
generate_coverage() {
    log_info "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞..."
    
    if forge coverage --report lcov; then
        log_success "–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–æ–∑–¥–∞–Ω"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HTML –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω genhtml
        if command -v genhtml &> /dev/null; then
            genhtml lcov.info --output-directory coverage-report
            log_success "HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ ./coverage-report/"
        fi
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
    fi
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–Ω–∏–º–∫–æ–≤ –≥–∞–∑–∞
generate_gas_snapshots() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–∞–∑–∞..."
    
    if forge snapshot; then
        log_success "–°–Ω–∏–º–∫–∏ –≥–∞–∑–∞ —Å–æ–∑–¥–∞–Ω—ã –≤ .gas-snapshot"
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–Ω–∏–º–∫–∏ –≥–∞–∑–∞"
    fi
}

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
run_static_analysis() {
    log_info "–ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞..."
    
    # Slither (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    if command -v slither &> /dev/null; then
        echo "üîç –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Slither..."
        if slither . --exclude-dependencies; then
            log_success "Slither –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
        else
            log_warning "Slither –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
        fi
    else
        log_warning "Slither –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local test_type="${1:-all}"
    
    echo "üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: $test_type"
    echo ""
    
    check_dependencies
    compile_contracts
    
    case $test_type in
        "unit")
            run_unit_tests
            ;;
        "integration")
            run_integration_tests
            ;;
        "performance")
            run_performance_tests
            ;;
        "fuzz")
            run_fuzz_tests
            ;;
        "multichain")
            run_multichain_tests
            ;;
        "coverage")
            generate_coverage
            ;;
        "all")
            echo "üîÑ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤..."
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
            run_unit_tests || log_warning "Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
            run_integration_tests || log_warning "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
            run_performance_tests || log_warning "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
            run_fuzz_tests || log_warning "–§–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
            run_multichain_tests || log_warning "–ú—É–ª—å—Ç–∏—á–µ–π–Ω —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
            
            # –ê–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç—ã
            generate_gas_snapshots
            generate_coverage
            run_static_analysis
            ;;
        *)
            log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: $test_type"
            echo ""
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:"
            echo "  unit        - Unit —Ç–µ—Å—Ç—ã"
            echo "  integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ñ–æ—Ä–∫–æ–º"
            echo "  performance - –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            echo "  fuzz        - –§–∞–∑–∑–∏–Ω–≥ —Ç–µ—Å—Ç—ã"
            echo "  multichain  - –ú—É–ª—å—Ç–∏—á–µ–π–Ω —Ç–µ—Å—Ç—ã"
            echo "  coverage    - –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
            echo "  all         - –í—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            exit 1
            ;;
    esac
    
    echo ""
    log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –ó–∞–ø—É—Å–∫
main "$@"
